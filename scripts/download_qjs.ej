// Property of EpochTech
// author: Jordan Castro
// email: jordan@grupojvm.com

// Download the correct files from https://github.com/bellard/quickjs
// and place them in lib/

macro jsimport(imports, module) {
    javascript{
        import #imports from #module
    }
}

@jsimport({ File }, "ejr:io")

files = [
    // VM
    "quickjs.c",
    "quickjs.h",
    // Utils required by the VM
    "cutils.c",
    "cutils.h",
    // String helpers
    "libregexp.c",
    "libregexp.h",
    "libregexp-opcode.h",
    // RegExp engine implementation.
    "libunicode.c",
    "libunicode.h", 
    "libunicode-table.h",
    // Unicode tables and helpers for RegExp, string normalization
    "dtoa.c",
    "dtoa.h",
    // Double â†’ string conversion and back (printing/parsing floating point numbers).
    "list.h",
    // Simple linked-list macros used throughout.
    "quickjs-atom.h",
    "quickjs-opcode.h",
    // quickjs-lib (std, os) <- This is optional. I don't use it in default ejr builds.
    // "quickjs-libc.c",
    // "quickjs-libc.h"
]
// https://raw.githubusercontent.com/bellard/quickjs/refs/heads/master/file

save_file = async fn(file_name, contents) await File.write("lib/$file_name", contents)

async fn download_file(file) {
    fn{
        url = "https://raw.githubusercontent.com/bellard/quickjs/refs/heads/master/$file"
        contents = await fetch(url)
        contents = await contents.text()
    }
    // Save file
    await save_file(file, contents)
}

macro batch(func, items) {
    await Promise.all(items.map(func))
}

async {
    await @batch(download_file, files)
}